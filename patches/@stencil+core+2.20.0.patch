diff --git a/node_modules/@stencil/core/internal/client/index.js b/node_modules/@stencil/core/internal/client/index.js
index bf05e5d..64e3a6b 100644
--- a/node_modules/@stencil/core/internal/client/index.js
+++ b/node_modules/@stencil/core/internal/client/index.js
@@ -891,9 +891,9 @@ const createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {
             }
             newVNode.$flags$ |= newVNode.$children$
                 ? // slot element has fallback content
-                    2 /* VNODE_FLAGS.isSlotFallback */
+                2 /* VNODE_FLAGS.isSlotFallback */
                 : // slot element does not have fallback content
-                    1 /* VNODE_FLAGS.isSlotReference */;
+                1 /* VNODE_FLAGS.isSlotReference */;
         }
     }
     if (BUILD.isDev && newVNode.$elm$) {
@@ -1704,6 +1704,7 @@ const dispatchHooks = (hostRef, isInitialLoad) => {
 const updateComponent = async (hostRef, instance, isInitialLoad) => {
     // updateComponent
     const elm = hostRef.$hostElement$;
+    if (!elm) return;
     const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);
     const rc = elm['s-rc'];
     if (BUILD.style && isInitialLoad) {
@@ -1959,7 +1960,7 @@ const serverSideConnected = (elm) => {
         }
     }
 };
-const getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);
+const getValue = (ref, propName) => getHostRef(ref)?.$instanceValues$?.get(propName);
 const setValue = (ref, propName, newVal, cmpMeta) => {
     // check our new property value against our internal value
     const hostRef = getHostRef(ref);
@@ -2049,8 +2050,8 @@ const proxyComponent = (Cstr, cmpMeta, flags) => {
                         if (BUILD.isDev) {
                             const ref = getHostRef(this);
                             if (
-                            // we are proxying the instance (not element)
-                            (flags & 1 /* PROXY_FLAGS.isElementConstructor */) === 0 &&
+                                // we are proxying the instance (not element)
+                                (flags & 1 /* PROXY_FLAGS.isElementConstructor */) === 0 &&
                                 // the element is not constructing
                                 (ref.$flags$ & 8 /* HOST_FLAGS.isConstructingInstance */) === 0 &&
                                 // the member is a prop
@@ -2138,13 +2139,13 @@ const proxyComponent = (Cstr, cmpMeta, flags) => {
             Cstr.observedAttributes = members
                 .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */) // filter to only keep props that should match attributes
                 .map(([propName, m]) => {
-                const attrName = m[1] || propName;
-                attrNameToPropName.set(attrName, propName);
-                if (BUILD.reflect && m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {
-                    cmpMeta.$attrsToReflect$.push([propName, attrName]);
-                }
-                return attrName;
-            });
+                    const attrName = m[1] || propName;
+                    attrNameToPropName.set(attrName, propName);
+                    if (BUILD.reflect && m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {
+                        cmpMeta.$attrsToReflect$.push([propName, attrName]);
+                    }
+                    return attrName;
+                });
         }
     }
     return Cstr;
@@ -2419,6 +2420,7 @@ const proxyCustomElement = (Cstr, compactMeta) => {
             if (BUILD.disconnectedCallback && originalDisconnectedCallback) {
                 originalDisconnectedCallback.call(this);
             }
+            deregisterHost(this);
         },
         __attachShadow() {
             if (supportsShadow) {
@@ -2763,6 +2765,7 @@ const bootstrapLazy = (lazyBundles, options = {}) => {
                 }
                 disconnectedCallback() {
                     plt.jmp(() => disconnectedCallback(this));
+                    deregisterHost(this);
                 }
                 componentOnReady() {
                     return getHostRef(this).$onReadyPromise$;
@@ -3070,6 +3073,20 @@ const insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, in
 const hostRefs = /*@__PURE__*/ new WeakMap();
 const getHostRef = (ref) => hostRefs.get(ref);
 const registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);
+
+const deregisterHost = (elm) => {
+    if (hostRefs.has(elm)) {
+        hostRefs.get(elm).$onReadyResolve$ = undefined;
+        hostRefs.get(elm).$vnode$ = undefined;
+        hostRefs.get(elm).$elm$ = undefined
+        hostRefs.get(elm).$onInstancePromise$ = undefined
+        hostRefs.get(elm).$onReadyPromise$ = undefined
+        hostRefs.get(elm).$hostElement$ = undefined
+        hostRefs.get(elm).$ancestorComponent$ = undefined
+        hostRefs.get(elm).$lazyInstance$ = undefined
+    }
+}
+
 const registerHost = (elm, cmpMeta) => {
     const hostRef = {
         $flags$: 0,
@@ -3118,16 +3135,16 @@ const loadModule = (cmpMeta, hostRef, hmrVersionId) => {
     }
     /*!__STENCIL_STATIC_IMPORT_SWITCH__*/
     return import(
-    /* @vite-ignore */
-    /* webpackInclude: /\.entry\.js$/ */
-    /* webpackExclude: /\.system\.entry\.js$/ */
-    /* webpackMode: "lazy" */
-    `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then((importedModule) => {
-        if (!BUILD.hotModuleReplacement) {
-            cmpModules.set(bundleId, importedModule);
-        }
-        return importedModule[exportName];
-    }, consoleError);
+        /* @vite-ignore */
+        /* webpackInclude: /\.entry\.js$/ */
+        /* webpackExclude: /\.system\.entry\.js$/ */
+        /* webpackMode: "lazy" */
+        `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then((importedModule) => {
+            if (!BUILD.hotModuleReplacement) {
+                cmpModules.set(bundleId, importedModule);
+            }
+            return importedModule[exportName];
+        }, consoleError);
 };
 const styles = /*@__PURE__*/ new Map();
 const modeResolutionChain = [];
